parameters:
  ArmTemplateRoot: '$(Pipeline.Workspace)/Dfc.Grafana.Resources.ArmTemplates'
  AksResourceGroup: ''
  AzureSubscriptionEndpoint: ''
  Environment: ''
  EnvironmentTag: ''
  ImageBaseName: ''
  RenderImageBaseName: ''
  ParentBusinessTag: ''
  ResourceGroup: ''
  ServiceOfferingTag: ''
  SolutionBaseName: ''
  GrafanaNamespace: ''
  GrafanaRendererNamespace: ''
  ReleaseToGrafana: ''
  ReleaseToKured: ''
  GrafanaPassword: ''
  storageAccountName: ''
  storageAccountResourceGroup: ''
  SharedStorageAccountKey: ''
  CertificateSecretName: ''

jobs:
- deployment: DeployTo_${{ parameters.Environment }}
  pool:
    name: 'NCS - CI and CD'
  environment: ${{ parameters.Environment }}
  workspace:
    clean: all
  strategy:
    runOnce:
      deploy:
        steps:
        - ${{ contains('${{ parameters.ReleaseToGrafana }}', 'YES') }}:
          - template: AzureDevOpsTemplates/Deploy/StepTemplates/dfc-arm-deploy.yml@dfc-devops
            parameters:
              ArmTemplateRoot: ${{ parameters.ArmTemplateRoot }}
              AzureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
              EnvironmentTag: ${{ parameters.EnvironmentTag }}
              ParentBusinessTag: ${{ parameters.ParentBusinessTag }}
              ResourceGroup: ${{ parameters.ResourceGroup }}
              ServiceOfferingTag: ${{ parameters.ServiceOfferingTag }}
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Set-CertficatesDirectoriesInFileShare'
          condition: contains('${{ parameters.ReleaseToGrafana }}', 'YES')          
          inputs:
            azureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
            scriptPath: $(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}.PSScripts/Set-CertficatesDirectoriesInFileShare.ps1
            scriptArguments: '-ResourceGroupName ${{ parameters.storageAccountResourceGroup }} -ShareName "certificates" -StorageAccountName ${{ parameters.storageAccountName }} -Verbose'
            azurePowerShellVersion: 'latestVersion'
        - checkout: dfc-devops
          path: 's/'
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Export-KeyVaultCertToPemFiles'
          condition: contains('${{ parameters.ReleaseToGrafana }}', 'YES')          
          inputs:
            azureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
            scriptPath: $(Build.SourcesDirectory)/PSCoreScripts/Export-KeyVaultCertToPemFiles.ps1
            scriptArguments: '-CertificateSecretName ${{ parameters.CertificateSecretName }} -FileShare "certificates" -FullChainOutputDirectories @("default","default\trusted") -KeyVaultName ${{ parameters.KeyVaultName }} -PrivKeyOutputDirectories @("default") -StorageAccountName ${{ parameters.storageAccountName }} -StorageResourceGroupName ${{ parameters.storageAccountResourceGroup }} -Verbose'
            azurePowerShellVersion: 'latestVersion'
        - template: AzureDevOpsTemplates\Deploy\StepTemplates\dfc-kubernetes-create-namespace.yml@dfc-devops
          parameters:
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            AksResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            Namespace: ${{ parameters.GrafanaNamespace }}
        - task: Kubernetes@1
          displayName: kubectl create storage secret
          condition: contains('${{ parameters.ReleaseToGrafana }}', 'YES')          
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.GrafanaNamespace }}'
            secretType: generic
            secretArguments: --from-literal=azurestorageaccountname=${{ parameters.storageAccountName }} --from-literal=azurestorageaccountkey=${{ parameters.SharedStorageAccountKey }}
            secretName: sharedstr-account-secret
        - task: Kubernetes@1
          displayName: kubectl create grafana secret
          condition: contains('${{ parameters.ReleaseToGrafana }}', 'YES')          
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.GrafanaNamespace}}'
            secretType: generic
            secretArguments: --from-literal=username=admin --from-literal=password=${{ parameters.GrafanaPassword }}
            secretName: grafana-account-secret
        - task: esfadevops.Tokenization.custom-build-task.Tokenization@0
          displayName: 'Tokenization: Transform file grafana.yaml'
          condition: contains('${{ parameters.ReleaseToGrafana }}', 'YES')          
          inputs:
            SourcePath: $(Pipeline.Workspace)/${{ parameters.ImageBaseName }}
            TargetFileNames: grafana.yaml
        - task: Kubernetes@1
          displayName: kubectl deploy manifest
          condition: contains('${{ parameters.ReleaseToGrafana }}', 'YES')          
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.GrafanaNamespace }}'
            command: 'apply'
            arguments: '--filename=$(Pipeline.Workspace)/${{ parameters.ImageBaseName }}/grafana.yaml'
        - template: AzureDevOpsTemplates\Deploy\StepTemplates\dfc-kubernetes-create-namespace.yml@dfc-devops
          parameters:
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            AksResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            Namespace: ${{ parameters.GrafanaRendererNamespace }}
        - task: esfadevops.Tokenization.custom-build-task.Tokenization@0
          displayName: 'Tokenization: Transform file grafana-renderer.yaml'
          condition: contains('${{ parameters.ReleaseToGrafana }}', 'YES')          
          inputs:
            SourcePath: $(Pipeline.Workspace)/${{ parameters.RenderImageBaseName }}
            TargetFileNames: grafana-renderer.yaml
        - task: Kubernetes@1
          displayName: kubectl deploy manifest
          condition: contains('${{ parameters.ReleaseToGrafana }}', 'YES')          
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.GrafanaRendererNamespace }}'
            command: 'apply'
            arguments: '--filename=$(Pipeline.Workspace)/${{ parameters.RenderImageBaseName }}/grafana-renderer.yaml'
        - task: esfadevops.Tokenization.custom-build-task.Tokenization@0
          displayName: 'Tokenization: Transform file kured-1.6.1-dockerhub.yaml'
          condition: contains('${{ parameters.ReleaseToKured }}', 'YES')          
          inputs:
            SourcePath: $(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}.KuredManifests
            TargetFileNames: 'kured-1.6.1-dockerhub.yaml'            
        - task: Kubernetes@1
          displayName: create kured-ns namespace
          condition: contains('${{ parameters.ReleaseToKured }}', 'YES')          
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: default
            command: apply
            arguments: '--filename=$(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}.KuredManifests/create-kured-namespace.yaml '
            versionSpec: 1.19.4
        - task: Kubernetes@1
          displayName: kubectl deploy kured daemonset 1.6.1
          condition: contains('${{ parameters.ReleaseToKured }}', 'YES')          
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: 'kured-ns'
            command: apply
            arguments: '--filename=$(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}.KuredManifests/kured-1.6.1-dockerhub.yaml '
            versionSpec: 1.19.4
